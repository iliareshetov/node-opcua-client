const {
  OPCUAClient,
  AttributeIds,
  TimestampsToReturn,
  ClientMonitoredItem,
} = require("node-opcua");
const os = require("os");
const pool = require("./db");

const client = OPCUAClient.create({ endpointMustExist: false });
/*
- Root (i=84)
    - Objects (i=85)
    - Types (i=86)
    - Views (i=87)
*/
// const nodeId = "ns=0;i=85"; // RootFolder.Objects.
const nodeId = "ns=1;i=1000"; // RootFolder.Objects

const hostname = os.hostname().toLowerCase();
const endpointUrl = "opc.tcp://" + hostname + ":26543";

async function main() {
  try {
    // step 1 : connect to
    await client.connect(endpointUrl);
    console.log("connected");

    // step 2 : createSession

    const session = await client.createSession();
    console.log("session created");

    let browseResult = await session.browse({
      nodeId,
      //   nodeClassMask: NodeClass.Variable, // we only want sub node that are Variables
      resultMask: 63, // extract all information possible
    });
    console.log("BrowseResult = ", browseResult.toString());
    const tagName = browseResult.references[1].browseName.name;
    const nodeIdName = browseResult.references[1].nodeId.toString();
    console.log("name = ", tagName);
    console.log("nodeId = ", nodeIdName);

    const subscription = await session.createSubscription2({
      requestedPublishingInterval: 2000,
      requestedMaxKeepAliveCount: 20,
      requestedLifetimeCount: 6000,
      maxNotificationsPerPublish: 1000,
      publishingEnabled: true,
      priority: 10,
    });

    subscription
      .on("keepalive", () => console.log("keepalive"))
      .on("terminated", () => console.log("subscription terminated"));

    const itemToMonitor = {
      nodeId: "ns=1;i=1001",
      attributeId: AttributeIds.Value,
    };

    const parameters = {
      samplingInterval: 5000,
      discardOldest: true,
      queueSize: 10,
    };

    const monitoredItem = ClientMonitoredItem.create(
      subscription,
      itemToMonitor,
      parameters,
      TimestampsToReturn.Both
    );

    monitoredItem.on("changed", (dataValue) => {
      console.log();
      console.log("***** ***** ***** START ***** ***** *****");
      console.log(
        `Reading value: ${dataValue.value.value}, time: ${dataValue.sourceTimestamp}`
      );
      // console.log(dataValue);

      save(nodeIdName, tagName, dataValue.value.value);
    });
  } catch (err) {
    console.log("An error has occured : ", err);
  }
}

async function initDb() {
  try {
    await pool.query("CREATE SCHEMA IF NOT EXISTS opcuadata");
    await pool.query(
      "CREATE TABLE IF NOT EXISTS opcuadata.tag(tagid INT GENERATED BY DEFAULT AS IDENTITY, nodeid text NOT NULL, tagname text NOT NULL, tagvalue text NOT NULL, updatetime TIMESTAMP)"
    );
    console.log("INFO: successfully initialized database");
  } catch (error) {
    console.log(error);
  }
}

async function save(nodeId, name, value) {
  try {
    const res = await pool.save(nodeId, name, value);

    console.log(res ? res : "Something went wrong");
    console.log("***** ***** ***** END ***** ***** *****");
  } catch (error) {
    console.log(error);
  }
}

initDb();
main();
