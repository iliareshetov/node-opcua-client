import {
  OPCUAClient,
  AttributeIds,
  TimestampsToReturn,
  ClientMonitoredItem,
  ClientSession,
  BrowseResult,
  UAString,
  ClientSubscription,
  DataValue,
} from "node-opcua";
import os from "os";
import { pool, saveTag } from "./db";
import { ItemToMonitor, Parameters } from "./types";

const client: OPCUAClient = OPCUAClient.create({ endpointMustExist: false });
/*
- Root (i=84)
    - Objects (i=85)
    - Types (i=86)
    - Views (i=87)
*/
// const nodeId = "ns=0;i=85"; // RootFolder.Objects.
const nodeId: string = "ns=1;i=1000"; // RootFolder.Objects

const hostname: string = os.hostname().toLowerCase();
const endpointUrl: string = "opc.tcp://" + hostname + ":26543";

async function main() {
  try {
    // step 1 : connect to
    await client.connect(endpointUrl);
    console.log(`INFO: Connected, endpointUrl: ${endpointUrl}`);

    // step 2 : createSession
    const session: ClientSession = await client.createSession();
    console.log("INFO: session created");

    const browseResult: BrowseResult = await session.browse({
      nodeId,
      //   nodeClassMask: NodeClass.Variable, // we only want sub node that are Variables
      resultMask: 63, // extract all information possible
    });

    console.log("INFO: BrowseResult = ", browseResult.toString());

    let tagName: UAString;
    let nodeIdName: string;

    if (browseResult.references !== null) {
      for (const reference of browseResult.references) {
        console.log(reference);
        if (reference.nodeId.toString() === "ns=1;i=1001") {
          tagName = reference.browseName.name;
          nodeIdName = reference.nodeId.toString();
          console.log("INFO: selected to monitor tagName: ", tagName);
          console.log("INFO: selected to monitor nodeId: ", nodeIdName);
        }
      }
    }

    const subscription: ClientSubscription = await session.createSubscription2({
      requestedPublishingInterval: 2000,
      requestedMaxKeepAliveCount: 20,
      requestedLifetimeCount: 6000,
      maxNotificationsPerPublish: 1000,
      publishingEnabled: true,
      priority: 10,
    });

    subscription
      .on("keepalive", () => console.log("keepalive"))
      .on("terminated", () => console.log("subscription terminated"));

    const itemToMonitor: ItemToMonitor = {
      nodeId: "ns=1;i=1001",
      attributeId: AttributeIds.Value,
    };

    const parameters: Parameters = {
      samplingInterval: 5000,
      discardOldest: true,
      queueSize: 10,
    };

    const monitoredItem: ClientMonitoredItem = ClientMonitoredItem.create(
      subscription,
      itemToMonitor,
      parameters,
      TimestampsToReturn.Both
    );

    monitoredItem.on("changed", (dataValue: DataValue) => {
      console.log();
      console.log("***** ***** ***** START ***** ***** *****");
      console.log(
        `Reading value: ${dataValue.value.value}, time: ${dataValue.sourceTimestamp}`
      );
      console.log(dataValue);

      save(nodeIdName, tagName, dataValue.value.value);
    });
  } catch (err) {
    console.log("An error has occured : ", err);
  }
}

async function initDb() {
  try {
    await pool.query("CREATE SCHEMA IF NOT EXISTS opcuadata");
    await pool.query(
      "CREATE TABLE IF NOT EXISTS opcuadata.tag(tagid INT GENERATED BY DEFAULT AS IDENTITY, nodeid text NOT NULL, tagname text NOT NULL, tagvalue text NOT NULL, updatetime TIMESTAMP)"
    );
    console.log("INFO: successfully initialized database");
  } catch (error) {
    console.log(error);
  }
}

async function save(nodeId: string, name: UAString, value: string) {
  try {
    const res: string = await saveTag(nodeId, name, value);

    console.log(res ? res : "Something went wrong");
    console.log("***** ***** ***** END ***** ***** *****");
  } catch (error) {
    console.log(error);
  }
}

initDb();
main();
